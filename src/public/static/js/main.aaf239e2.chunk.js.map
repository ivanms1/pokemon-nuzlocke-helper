{"version":3,"sources":["pages/Nuzlocke/Nuzlocke.module.css","pages/Login/Login.module.css","pages/Register/Register.module.css","components/Formik/Select/Select.module.css","components/Formik/CustomSelect/CustomSelect.module.css","pages/Home/index.tsx","components/Formik/CustomInput/index.tsx","accessToken.tsx","components/AppContext/index.tsx","pages/Login/index.tsx","pages/Profile/NuzlockePreview.tsx","components/Formik/Select/index.tsx","pages/Profile/AddNuzlockeDrawer.tsx","pages/Profile/index.tsx","components/Formik/CustomSelect/index.tsx","pages/Nuzlocke/AddNewPokemon.tsx","pages/Nuzlocke/Team.tsx","pages/Nuzlocke/InPc.tsx","pages/Nuzlocke/Dead.tsx","pages/Nuzlocke/Seen.tsx","pages/Nuzlocke/PokemonDrawer.tsx","pages/Nuzlocke/EncountersDrawer.tsx","pages/Nuzlocke/index.tsx","pages/Register/index.tsx","components/Routes/AuthenticatedRoute.tsx","components/Routes/PublicRoute.tsx","App.tsx","serviceWorker.ts","apolloClient.tsx","index.tsx","pages/Profile/Profile.module.css","pages/Home/Home.module.css"],"names":["module","exports","Home","history","useHistory","className","styles","type","icon","minimal","LoginButton","onClick","push","ActionBox","GetStartedButton","CustomInput","form","field","helperText","labelInfo","label","checkboxLabel","props","useState","showPassword","setShowPassword","touched","errors","setFieldValue","lockIcon","intent","Intent","WARNING","name","labelFor","checked","value","onChange","e","target","rightElement","id","accessToken","getAccessToken","setAccessToken","token","isTokenValid","exp","jwtDecode","Date","now","error","Context","React","createContext","MUTATION_LOGIN","Login","alert","setAlert","onLogin","useContext","useMutation","errorPolicy","login","loading","emailIcon","LoginPage","initialValues","email","password","validationSchema","yup","shape","required","onSubmit","values","a","variables","input","catch","err","response","data","userId","LoginForm","placeholder","component","position","message","onDismiss","to","NuzlockePreview","nuzlocke","team","pokemons","filter","pok","status","_id","game","TeamSprites","length","map","pokemon","key","content","nickname","Position","TOP","src","sprite","alt","Select","options","isMulti","classNames","option","QUERY_GET_GAMES","QUERY_GET_USER","MUTATION_CREATE_NUZLOCKE","TYPE_OPTIONS","AddNuzlockeDrawer","onClose","isOpen","useParams","useQuery","update","cache","createNuzlocke","readQuery","query","writeQuery","user","nuzlockes","createLoading","gameOptions","games","sort","b","title","nullable","Number","AddNuzlockeForm","PLUS","Profile","isNewNuzlockeOpen","setIsNewNuzlockeOpen","MyNuzlockes","AddButton","large","ADD","BlueprintSelect","ofType","CustomSelect","currentItem","find","opt","items","itemPredicate","item","toLowerCase","indexOf","itemRenderer","handleClick","modifiers","ItemIcon","active","text","noResults","disabled","activeItem","onItemSelect","rightIcon","QUERY_ADD_POKEMON_DATA","MUTATION_ADD_POKEMON","AddNewPokemon","regionId","gameId","skip","updatePokemons","addLoading","AddNewPokemonContainer","region","location","customLocation","partner","isLocationCustom","when","is","then","otherwise","AddNewPokemonForm","initialContent","LocationFields","CustomLocationInput","locations","replace","LocationCheckbox","NicknameInput","SubmitButton","Team","nuzlockeType","selectPokemon","droppableId","provided","ref","innerRef","droppableProps","TeamGrid","empty","index","TooltipWrapper","PartnerImage","draggableId","TeamPokemon","draggableProps","dragHandleProps","image","InPc","Dead","Seen","EncounterList","SeenPokemon","MUTATION_UPDATE_POKEMON_STATUS","PokemonDrawer","updatePokemon","updateLoading","size","Drawer","SIZE_SMALL","EditPokemonForm","EncountersDrawer","Encounters","Encounter","QUERY_GET_NUZLOCKE","Nuzlocke","isAddModalOpen","setIsAddModalOpen","isEncountersModalOpen","setIsEncountersModalOpen","selectedPokemon","setSelectedPokemon","nuzlockeId","updatePokemonStatus","onDragEnd","result","destination","__typename","pokemonToUpdate","optimisticResponse","inPc","deadMons","seenMons","BackButton","Header","getType","Pokemons","MUTATION_SIGNUP","Register","signUp","personIcon","repeatPassword","test","this","parent","RegisterForm","rigth","fill","AuthenticatedRoute","path","children","isAuthenticated","QUERY_GET_CURRENT_USER","PublicRoute","App","exact","Boolean","window","hostname","match","request","operation","setContext","headers","authorization","requestLink","ApolloLink","forward","Observable","observer","handle","Promise","resolve","oper","subscribe","next","bind","complete","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","fetch","method","credentials","handleFetch","handleError","console","warn","onError","graphQLErrors","networkError","forEach","log","HttpLink","uri","InMemoryCache","ReactDOM","render","setIsAuthenticated","setLoading","useApolloClient","useEffect","res","json","ok","useMemo","onLogout","resetStore","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aaf239e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackButton\":\"Nuzlocke_BackButton__1tbve\",\"Nuzlocke\":\"Nuzlocke_Nuzlocke__3sojL\",\"Header\":\"Nuzlocke_Header__2uR40\",\"Pokemons\":\"Nuzlocke_Pokemons__A4gC4\",\"TeamGrid\":\"Nuzlocke_TeamGrid__1ffbE\",\"empty\":\"Nuzlocke_empty__xYGA1\",\"TeamPokemon\":\"Nuzlocke_TeamPokemon__2-eep\",\"TooltipWrapper\":\"Nuzlocke_TooltipWrapper__3E2VY\",\"PartnerImage\":\"Nuzlocke_PartnerImage__33bR-\",\"AddNewPokemon\":\"Nuzlocke_AddNewPokemon__2_2kP\",\"AddNewPokemonContainer\":\"Nuzlocke_AddNewPokemonContainer__2lVCq\",\"AddNewPokemonForm\":\"Nuzlocke_AddNewPokemonForm__1uuxO\",\"LocationFields\":\"Nuzlocke_LocationFields__OKVcA\",\"CustomLocationInput\":\"Nuzlocke_CustomLocationInput__2XPxF\",\"LocationCheckbox\":\"Nuzlocke_LocationCheckbox__1CKCm\",\"NicknameInput\":\"Nuzlocke_NicknameInput__hsnTL\",\"SubmitButton\":\"Nuzlocke_SubmitButton__OhUW9\",\"SeenPokemon\":\"Nuzlocke_SeenPokemon__7xoqo\",\"Encounters\":\"Nuzlocke_Encounters__2ywY4\",\"Encounter\":\"Nuzlocke_Encounter__1CPjR\",\"EditPokemonForm\":\"Nuzlocke_EditPokemonForm__3SiNK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"Login_LoginPage__3kKRJ\",\"LoginForm\":\"Login_LoginForm__3fpzB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"Register_Register__PAeNT\",\"RegisterForm\":\"Register_RegisterForm__1xZ2B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Select\":\"Select_Select__1fyIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ItemIcon\":\"CustomSelect_ItemIcon___t5sB\"};","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button } from '@blueprintjs/core';\n\nimport styles from './Home.module.css';\n\nconst Home = () => {\n  const history = useHistory();\n  return (\n    <div className={styles.Home}>\n      <Button\n        type='button'\n        icon='log-in'\n        minimal\n        className={styles.LoginButton}\n        onClick={() => history.push('/login')}\n      >\n        Login\n      </Button>\n      <div className={styles.ActionBox}>\n        <h1>Welcome to the Pokemon Nuzlocke helper</h1>\n        <span>\n          Track and manage your team and encounters, prevent using illegal\n          pokemons or pairs.\n        </span>\n        <Button\n          type='button'\n          icon='confirm'\n          className={styles.GetStartedButton}\n          onClick={() => history.push('/register')}\n        >\n          Get Started\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react'\nimport { FormGroup, InputGroup, Checkbox, Button, Intent } from '@blueprintjs/core'\nimport { FieldProps } from 'formik'\n\nconst CustomInput = ({\n  form,\n  field,\n  type = 'text',\n  helperText,\n  labelInfo,\n  label,\n  className,\n  checkboxLabel,\n  ...props\n}\n  : {\n    form: FieldProps['form'],\n    field: FieldProps['field'],\n    type: string,\n    label: string,\n    helperText: string,\n    labelInfo: string,\n    className: string,\n    checkboxLabel: string;\n  }) =>\n{\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { touched, errors, setFieldValue } = form;\n\n  const lockIcon = (\n    <Button\n      icon={ showPassword ? \"unlock\" : \"lock\" }\n      intent={ Intent.WARNING }\n      minimal={ true }\n      onClick={ () => setShowPassword(!showPassword) }\n    />\n  );\n\n  return (\n    <FormGroup\n      label={ label }\n      className={ className }\n      labelInfo={ labelInfo }\n      helperText={ touched[field.name] && errors[field.name] ? errors[field.name] : helperText }\n      labelFor={ field.name }\n      intent={ touched[field.name] && errors[field.name] ? 'danger' : 'none' }\n    >\n      { type === \"checkbox\" ? (\n        <Checkbox\n          checked={ field.value }\n          className={ className }\n          label={ checkboxLabel }\n          onChange={ (e: any) => setFieldValue(field.name, e.target.checked) }\n        />\n      ) : type === 'password' ? (\n        <InputGroup\n          type={ showPassword ? 'text' : 'password' }\n          value={ field.value }\n          rightElement={lockIcon}\n          id={ field.name }\n          onChange={ (e: any) => setFieldValue(field.name, e.target.value) }\n          { ...props }\n        />\n      ) : (\n            <InputGroup\n              type={ type }\n              value={ field.value }\n              id={ field.name }\n              onChange={ (e: any) => setFieldValue(field.name, e.target.value) }\n              { ...props }\n            />\n          ) }\n\n    </FormGroup>\n  )\n}\n\nexport default CustomInput\n","import jwtDecode from 'jwt-decode';\n\nexport let accessToken = '';\n\nexport const getAccessToken = () => accessToken;\nexport const setAccessToken = (token: string) => (accessToken = token);\nexport const isTokenValid = (token: string) => {\n  if (!token) return false;\n  try {\n    const { exp } = jwtDecode(token);\n    if (Date.now() >= exp * 1000) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\n// import { useHistory } from 'react-router';\n\nimport {\n  getAccessToken,\n  isTokenValid,\n  setAccessToken\n} from '../../accessToken';\n\nconst Context = React.createContext<any>(null);\n\ninterface AppWrapperProps {\n  children: React.ReactNode;\n}\n\nconst token = getAccessToken();\n\nconst AppProvider = ({ children }: AppWrapperProps) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(isTokenValid(token));\n  const [loading, setLoading] = useState(true);\n\n  // const history = useHistory();\n  const client = useApolloClient();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      fetch('http://localhost:4000/refresh-token', {\n        method: 'POST',\n        credentials: 'include'\n      }).then(async res => {\n        const data = await res.json();\n        if (!data.ok) {\n          setLoading(false);\n          setIsAuthenticated(false);\n          return;\n        }\n        setAccessToken(data.accessToken);\n        setIsAuthenticated(true);\n        setLoading(false);\n      });\n    }\n  }, [isAuthenticated]);\n\n  const value = useMemo(\n    () => ({\n      isAuthenticated,\n      onLogin: (token: string) => {\n        setAccessToken(token);\n        setIsAuthenticated(true);\n      },\n      onLogout: () => {\n        // history.replace('/login');\n        client.resetStore();\n        setIsAuthenticated(false);\n      }\n    }),\n    [client, isAuthenticated]\n  );\n  if (loading) {\n    return null;\n  }\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nexport { AppProvider };\n\nexport default Context;\n","import React, { useState, useContext } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Intent, Toaster, Toast } from '@blueprintjs/core';\nimport { loader } from 'graphql.macro';\nimport * as yup from 'yup';\n\nimport CustomInput from '../../components/Formik/CustomInput';\nimport Context from '../../components/AppContext';\n\nimport styles from './Login.module.css';\n\nconst MUTATION_LOGIN = loader('./mutationLogin.graphql');\n\nconst Login = () => {\n  const [alert, setAlert] = useState(false);\n\n  const { onLogin } = useContext(Context);\n\n  const [login, { loading }] = useMutation(MUTATION_LOGIN, {\n    errorPolicy: 'all'\n  });\n  const history = useHistory();\n\n  const emailIcon = (\n    <Button icon='envelope' intent={Intent.WARNING} minimal={true} />\n  );\n\n  return (\n    <div className={styles.LoginPage}>\n      <Formik\n        initialValues={{\n          email: '',\n          password: ''\n        }}\n        validationSchema={yup.object().shape({\n          email: yup\n            .string()\n            .required()\n            .label('this'),\n          password: yup\n            .string()\n            .required()\n            .label('this')\n        })}\n        onSubmit={async values => {\n          const response = await login({\n            variables: {\n              input: values\n            }\n          }).catch(err => setAlert(true));\n\n          if (response) {\n            onLogin(response.data.login.token);\n            history.push(`/profile/${response.data.login.userId}`);\n          }\n        }}\n      >\n        {() => (\n          <Form className={styles.LoginForm}>\n            <h1>Login</h1>\n            <Field\n              name='email'\n              placeholder='email'\n              rightElement={emailIcon}\n              component={CustomInput}\n            />\n            <Field\n              name='password'\n              type='password'\n              placeholder='password'\n              component={CustomInput}\n            />\n            <Button loading={loading} type='submit'>\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      {alert && (\n        <Toaster position='top'>\n          <Toast\n            intent='danger'\n            message='An error has occurred'\n            onDismiss={() => setAlert(false)}\n          />\n        </Toaster>\n      )}\n      <Link to='/register'>Don't have an account?</Link>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nimport styles from './Profile.module.css';\nimport { Tooltip, Position } from '@blueprintjs/core';\nimport { Link } from 'react-router-dom';\n\ninterface NuzlockePreviewProps {\n  nuzlocke: {\n    _id: string;\n    name: string;\n    game: {\n      name: string;\n    };\n    pokemons: {\n      _id: number;\n      nickname: string;\n      status: string;\n      pokemon: {\n        _id: string;\n        name: string;\n        sprite: string;\n      };\n    }[];\n  };\n}\n\nconst NuzlockePreview = ({ nuzlocke }: NuzlockePreviewProps) => {\n  const team = nuzlocke.pokemons.filter(pok => pok.status === 'IN_TEAM');\n  return (\n    <Link to={`/nuzlocke/${nuzlocke._id}`}>\n      <div className={styles.NuzlockePreview}>\n        {nuzlocke.name && <h4>{nuzlocke.name}</h4>}\n        <span>Pokemon {nuzlocke.game.name}</span>\n        <div className={styles.TeamSprites}>\n          {team.length > 0 ? (\n            team.map(pokemon => (\n              <Tooltip\n                key={pokemon.pokemon._id}\n                content={pokemon.nickname || pokemon.pokemon.name}\n                position={Position.TOP}\n              >\n                <img\n                  src={pokemon.pokemon.sprite}\n                  alt={`${pokemon.pokemon.name}`}\n                />\n              </Tooltip>\n            ))\n          ) : (\n            <span>Click here to add pokemons to your team</span>\n          )}\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default NuzlockePreview;\n","import React from 'react'\nimport { HTMLSelect, FormGroup } from '@blueprintjs/core'\nimport classNames from 'classnames'\nimport { FieldProps } from 'formik'\n\nimport styles from './Select.module.css'\n\ninterface SelectProps\n{\n  id: string;\n  options: {\n    value: string | number;\n    label: string;\n  }[]\n  isMulti: boolean;\n  className: string;\n  placeholder: string;\n  helperText: string;\n  label: string;\n  labelInfo: string;\n}\n\n\nconst Select = ({\n  id,\n  field,\n  form,\n  options,\n  className,\n  isMulti,\n  placeholder,\n  helperText,\n  label,\n  labelInfo,\n  ...props\n}:\n  SelectProps & { form: FieldProps['form'], field: FieldProps['field'] }) =>\n{\n  const { touched, errors, setFieldValue } = form;\n\n  return (\n    <FormGroup\n      label={ label }\n      labelInfo={ labelInfo }\n      labelFor={ id || field.name }\n      helperText={ touched[field.name] && errors[field.name] ? errors[field.name] : helperText }\n      intent={ touched[field.name] && errors[field.name] ? 'danger' : 'none' }\n    >\n      <HTMLSelect\n        id={ id || field.name }\n        className={ classNames(styles.Select, className) }\n        name={ field.name }\n        value={ field.value }\n        onChange={ e => setFieldValue(field.name, e.target.value) }\n        { ...props }\n      >\n        { placeholder && (\n          < option value=''>\n            { placeholder }\n          </option>\n        )\n        }\n        {\n          options.map(option => (\n            <option key={ option.value } value={ option.value }>\n              { option.label }\n            </option>\n          ))\n        }\n      </HTMLSelect >\n    </FormGroup>\n\n  )\n}\n\nexport default Select\n","import React from 'react';\nimport { Drawer, Button } from '@blueprintjs/core';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\nimport { useParams } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { Form, Formik, Field } from 'formik';\n\nimport Select from '../../components/Formik/Select';\nimport CustomInput from '../../components/Formik/CustomInput';\n\nimport { PLUS } from '@blueprintjs/icons/lib/esm/generated/iconNames';\n\nimport styles from './Profile.module.css';\n\nconst QUERY_GET_GAMES = loader('./queryGetGames.graphql');\nconst QUERY_GET_USER = loader('./queryGetUser.graphql');\nconst MUTATION_CREATE_NUZLOCKE = loader('./mutationCreateNuzlocke.graphql');\n\ninterface AddNuzlockeDrawerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nconst TYPE_OPTIONS = [\n  { value: 'NORMAL', label: 'Normal' },\n  { value: 'CAGELOCKE', label: 'Cagelocke' },\n  { value: 'SOUL_LINK', label: 'Soul Link' }\n];\n\nconst AddNuzlockeDrawer = ({ onClose, isOpen }: AddNuzlockeDrawerProps) => {\n  const { userId } = useParams();\n\n  const { data, loading } = useQuery(QUERY_GET_GAMES);\n  const [createNuzlocke, { loading: createLoading }] = useMutation(\n    MUTATION_CREATE_NUZLOCKE,\n    {\n      update(cache, { data: { createNuzlocke } }) {\n        const data: any = cache.readQuery({\n          query: QUERY_GET_USER,\n          variables: {\n            userId\n          }\n        });\n        cache.writeQuery({\n          query: QUERY_GET_USER,\n          data: {\n            user: {\n              ...data.user,\n              nuzlockes: [...data.user.nuzlockes, createNuzlocke]\n            }\n          }\n        });\n      }\n    }\n  );\n\n  if (loading || !data) {\n    return null;\n  }\n\n  const gameOptions = data.games\n    .map((game: any) => ({\n      value: game.id,\n      label: game.name\n    }))\n    .sort((a: any, b: any) => a.value - b.value);\n  return (\n    <Drawer isOpen={isOpen} onClose={onClose} title='Add New Nuzlocke'>\n      <Formik\n        initialValues={{\n          game: '',\n          name: '',\n          type: ''\n        }}\n        validationSchema={yup.object().shape({\n          game: yup\n            .number()\n            .nullable()\n            .required('You need to choose a game'),\n          name: yup.string(),\n          type: yup\n            .string()\n            .nullable()\n            .required('You need to choose a type')\n        })}\n        onSubmit={async ({ game, ...values }) => {\n          await createNuzlocke({\n            variables: {\n              input: {\n                ...values,\n                game: Number(game),\n                user: userId\n              }\n            }\n          });\n\n          onClose();\n        }}\n      >\n        {() => (\n          <Form className={styles.AddNuzlockeForm}>\n            <Field\n              id='game'\n              name='game'\n              options={gameOptions}\n              label='Game'\n              placeholder='Select...'\n              helperText='Choose what game you will play'\n              labelInfo='(required)'\n              component={Select}\n            />\n            <Field\n              id='name'\n              name='name'\n              label='Nuzlocke Title'\n              helperText='Custom title for your nuzlocke'\n              placeholder='Pokemon Red Randomizer Nuzlocke'\n              labelInfo='(optional)'\n              component={CustomInput}\n            />\n            <Field\n              id='type'\n              name='type'\n              label='Nuzlocke Type'\n              placeholder='Select...'\n              helperText='What type of nuzlocke you will play'\n              labelInfo='(required)'\n              options={TYPE_OPTIONS}\n              component={Select}\n            />\n            <Button\n              icon={PLUS}\n              type='submit'\n              intent='primary'\n              loading={createLoading}\n            >\n              Create Nuzlocke\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Drawer>\n  );\n};\n\nexport default AddNuzlockeDrawer;\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\nimport { Button, ProgressBar } from '@blueprintjs/core';\n\nimport NuzlockePreview from './NuzlockePreview';\nimport AddNuzlockeDrawer from './AddNuzlockeDrawer';\n\nimport { ADD } from '@blueprintjs/icons/lib/esm/generated/iconNames';\n\nimport styles from './Profile.module.css';\n\nconst QUERY_GET_USER = loader('./queryGetUser.graphql');\n\ninterface GetUserData {\n  user: {\n    id: string;\n    name: string;\n    nuzlockes: {\n      _id: string;\n      type: string;\n      name: string;\n      game: {\n        name: string;\n      };\n      pokemons: {\n        _id: number;\n        nickname: string;\n        status: string;\n        pokemon: {\n          _id: string;\n          name: string;\n          sprite: string;\n        };\n      }[];\n      score: number;\n      deaths: number;\n    }[];\n  };\n}\n\ninterface GetUserVars {\n  userId: string | undefined;\n}\n\nconst Profile = () => {\n  const [isNewNuzlockeOpen, setIsNewNuzlockeOpen] = useState(false);\n  const { userId } = useParams();\n  const { loading, data } = useQuery<GetUserData, GetUserVars>(QUERY_GET_USER, {\n    variables: {\n      userId\n    }\n  });\n\n  if (loading || !data) {\n    return <ProgressBar />;\n  }\n\n  const { user } = data;\n  return (\n    <div className={styles.Profile}>\n      <h1>Welcome {user.name}</h1>\n      <h3>My Nuzlockes</h3>\n      <div className={styles.MyNuzlockes}>\n        {user.nuzlockes.length > 0 ? (\n          user.nuzlockes.map(nuzlocke => (\n            <NuzlockePreview key={nuzlocke._id} nuzlocke={nuzlocke} />\n          ))\n        ) : (\n          <span>You don't have any nuzlockes yet</span>\n        )}\n      </div>\n      <Button\n        onClick={() => setIsNewNuzlockeOpen(true)}\n        className={styles.AddButton}\n        large\n        icon={ADD}\n      >\n        Add New Nuzlocke\n      </Button>\n      <AddNuzlockeDrawer\n        isOpen={isNewNuzlockeOpen}\n        onClose={() => setIsNewNuzlockeOpen(false)}\n      />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Button, MenuItem, FormGroup } from \"@blueprintjs/core\";\nimport { Select, ItemRenderer, ItemPredicate } from \"@blueprintjs/select\";\nimport { FieldProps } from 'formik';\n\nimport styles from './CustomSelect.module.css';\n\nconst BlueprintSelect = Select.ofType<any>();\n\ninterface CustomSelectProps\n{\n  id: string | number;\n  options: {\n    value: string,\n    label: string\n  }[];\n  className?: string;\n  label?: string;\n  labelInfo?: string;\n  helperText: string;\n  placeholder: string;\n}\nconst CustomSelect = ({\n  id,\n  field,\n  form,\n  options,\n  className,\n  label,\n  helperText,\n  labelInfo,\n  placeholder,\n  ...props\n}: CustomSelectProps & { form: FieldProps['form'], field: FieldProps['field'] }) =>\n{\n  const filterItems: ItemPredicate<any> = (query, item) =>\n  {\n    return item.label.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n  };\n\n  const { touched, errors, setFieldValue } = form;\n\n  const renderItems: ItemRenderer<any> = (item: any, { handleClick, modifiers }) => (\n    <MenuItem\n      key={ item.value }\n      icon={ item.icon && <img className={ styles.ItemIcon } src={ item.icon } alt={ item.name } /> }\n      active={ modifiers.active }\n      label={ item.label }\n      onClick={ handleClick }\n      text={ item.query }\n    />\n  )\n\n\n  const currentItem = options.find(opt => opt.value === field.value);\n\n  return (\n    <FormGroup\n      label={ label }\n      labelInfo={ labelInfo }\n      labelFor={ field.name }\n      helperText={ touched[field.name] && errors[field.name] ? errors[field.name] : helperText }\n      intent={ touched[field.name] && errors[field.name] ? 'danger' : 'none' }\n    >\n      <BlueprintSelect\n        items={ options }\n        itemPredicate={ filterItems }\n        itemRenderer={ renderItems }\n        noResults={ <MenuItem disabled={ true } text=\"No results.\" /> }\n        activeItem={ currentItem }\n        onItemSelect={ item => setFieldValue(field.name, item.value) }\n        { ...props }\n      >\n        <Button text={ currentItem ? currentItem.label : placeholder } rightIcon=\"double-caret-vertical\" />\n      </BlueprintSelect>\n    </FormGroup>\n\n  )\n}\n\nexport default CustomSelect;\n","import React from 'react';\nimport { Dialog, Button, Spinner } from '@blueprintjs/core';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Formik, Form, Field } from 'formik';\nimport { loader } from 'graphql.macro';\nimport * as yup from 'yup';\n\nimport CustomInput from '../../components/Formik/CustomInput';\nimport CustomSelect from '../../components/Formik/CustomSelect';\n\nimport styles from './Nuzlocke.module.css';\nimport { ADD } from '@blueprintjs/icons/lib/esm/generated/iconNames';\n\nconst QUERY_ADD_POKEMON_DATA = loader('./queryAddPokemonData.graphql');\nconst MUTATION_ADD_POKEMON = loader('./mutationAddPokemon.graphql');\n\ninterface AddNewPokemonProps {\n  isOpen: boolean;\n  onClose: () => void;\n  regionId: string;\n  gameId: string;\n  nuzlocke: {\n    _id: string;\n    type: string;\n    pokemons: {\n      pokemon: {\n        _id: string;\n      };\n      location: string;\n      isCaptured: boolean;\n    }[];\n  };\n}\n\ninterface PokemonDataProps {\n  pokemons: {\n    _id: string;\n    name: string;\n    sprite: string;\n  }[];\n  region: {\n    locations: string[];\n  };\n}\n\nconst AddNewPokemon = ({\n  isOpen,\n  onClose,\n  regionId,\n  nuzlocke,\n  gameId\n}: AddNewPokemonProps) => {\n  const { data, loading } = useQuery<PokemonDataProps, any>(\n    QUERY_ADD_POKEMON_DATA,\n    {\n      variables: {\n        regionId,\n        gameId\n      },\n      skip: !isOpen\n    }\n  );\n\n  const [updatePokemons, { loading: addLoading }] = useMutation(\n    MUTATION_ADD_POKEMON\n  );\n\n  if (loading || !data) {\n    return (\n      <Dialog\n        isOpen={isOpen}\n        onClose={onClose}\n        className={styles.AddNewPokemon}\n        title='Enter Encounter Details'\n      >\n        <div className={styles.AddNewPokemonContainer}>\n          <Spinner />\n        </div>\n      </Dialog>\n    );\n  }\n\n  const { pokemons, region } = data;\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      className={styles.AddNewPokemon}\n      title='Enter Encounter Details'\n    >\n      <div className={styles.AddNewPokemonContainer}>\n        <Formik\n          initialValues={{\n            location: '',\n            customLocation: '',\n            pokemon: '',\n            partner: '',\n            nickname: '',\n            status: '',\n            isLocationCustom: false\n          }}\n          validationSchema={yup.object().shape({\n            pokemon: yup\n              .string()\n              .required()\n              .label('This'),\n            status: yup\n              .string()\n              .required()\n              .label('This'),\n            location: yup.string().when('isLocationCustom', {\n              is: false,\n              then: yup\n                .string()\n                .required()\n                .label('This'),\n              otherwise: yup.string()\n            }),\n            customLocation: yup.string().when('isLocationCustom', {\n              is: true,\n              then: yup\n                .string()\n                .required()\n                .label('This'),\n              otherwise: yup.string()\n            })\n          })}\n          onSubmit={async ({\n            isLocationCustom,\n            customLocation,\n            location,\n            ...values\n          }) => {\n            await updatePokemons({\n              variables: {\n                id: nuzlocke._id,\n                pokemon: {\n                  ...values,\n                  location: isLocationCustom ? customLocation : location,\n                  partner: nuzlocke.type === 'SOUL_LINK' ? values.partner : null\n                }\n              }\n            });\n\n            onClose();\n          }}\n        >\n          {({ values }) => (\n            <Form>\n              <div className={styles.AddNewPokemonForm}>\n                <Field\n                  id='pokemon'\n                  name='pokemon'\n                  label='Select a Pokemon'\n                  component={CustomSelect}\n                  initialContent={null}\n                  placeholder='Search Pokemon'\n                  options={pokemons.map(pokemon => ({\n                    value: pokemon._id,\n                    label: pokemon.name,\n                    icon: pokemon.sprite\n                  }))}\n                />\n                {nuzlocke.type === 'SOUL_LINK' && (\n                  <Field\n                    id='partner'\n                    name='partner'\n                    label='Select a soulink partner'\n                    component={CustomSelect}\n                    initialContent={null}\n                    placeholder='Search Pokemon'\n                    options={pokemons.map(pokemon => ({\n                      value: pokemon._id,\n                      label: pokemon.name,\n                      icon: pokemon.sprite\n                    }))}\n                  />\n                )}\n                <div className={styles.LocationFields}>\n                  {values.isLocationCustom ? (\n                    <Field\n                      id='customLocation'\n                      name='customLocation'\n                      className={styles.CustomLocationInput}\n                      label='Enter Location'\n                      component={CustomInput}\n                      placeholder='Input Location'\n                    />\n                  ) : (\n                    <Field\n                      id='location'\n                      name='location'\n                      label='Select a Location'\n                      component={CustomSelect}\n                      initialContent={null}\n                      placeholder='Search'\n                      options={region.locations.map(location => ({\n                        label: location.replace(/-/g, ' '),\n                        value: location\n                      }))}\n                    />\n                  )}\n                  <Field\n                    id='isLocationCustom'\n                    className={styles.LocationCheckbox}\n                    checkboxLabel='Custom Location'\n                    name='isLocationCustom'\n                    type='checkbox'\n                    component={CustomInput}\n                  />\n                </div>\n                <Field\n                  id='status'\n                  name='status'\n                  component={CustomSelect}\n                  label='Status'\n                  placeholder='Select a Status'\n                  options={[\n                    {\n                      value: 'IN_TEAM',\n                      label: 'in team'\n                    },\n                    {\n                      value: 'IN_PC',\n                      label: 'in pc'\n                    },\n                    {\n                      value: 'SEEN',\n                      label: 'seen'\n                    },\n                    {\n                      value: 'DEAD',\n                      label: 'Dead'\n                    }\n                  ]}\n                />\n                {(values.status === 'IN_TEAM' || values.status === 'IN_PC') && (\n                  <Field\n                    id='nickname'\n                    name='nickname'\n                    className={styles.NicknameInput}\n                    label='Enter Pokemon nickname'\n                    component={CustomInput}\n                    placeholder='Pebbles'\n                  />\n                )}\n              </div>\n              <Button\n                className={styles.SubmitButton}\n                icon={ADD}\n                type='submit'\n                loading={addLoading}\n              >\n                Add\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default AddNewPokemon;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Position, Tooltip } from '@blueprintjs/core';\n\nimport styles from './Nuzlocke.module.css';\n\ninterface TeamProps {\n  pokemons: {\n    _id: string;\n    nickname: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n  }[];\n  nuzlockeType: string;\n  selectPokemon: Dispatch<\n    SetStateAction<{\n      isOpen: boolean;\n      pokemon: null;\n    }>\n  >;\n}\n\nconst Team = ({ pokemons, nuzlockeType, selectPokemon }: TeamProps) => {\n  return (\n    <Droppable droppableId='IN_TEAM'>\n      {provided => (\n        <div\n          className={styles.Team}\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n        >\n          <h2>Team</h2>\n          <div\n            className={classNames(styles.TeamGrid, {\n              [styles.empty]: pokemons.length < 1\n            })}\n          >\n            {pokemons.length > 0 ? (\n              pokemons.map((pokemon: any, index: number) => (\n                <Tooltip\n                  key={pokemon._id}\n                  className={styles.TooltipWrapper}\n                  content={\n                    nuzlockeType === 'SOUL_LINK' ? (\n                      <img\n                        className={styles.PartnerImage}\n                        src={pokemon.partner.sprite}\n                        alt={pokemon.partner.name}\n                      />\n                    ) : pokemon.nickname ? (\n                      pokemon.nickname\n                    ) : (\n                      pokemon.pokemon.name\n                    )\n                  }\n                  position={Position.TOP}\n                >\n                  <Draggable draggableId={pokemon._id} index={index}>\n                    {provided => (\n                      <div\n                        className={styles.TeamPokemon}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        onClick={() =>\n                          selectPokemon({\n                            isOpen: true,\n                            pokemon\n                          })\n                        }\n                      >\n                        <img\n                          src={pokemon.pokemon.image}\n                          alt={pokemon.pokemon.name}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                </Tooltip>\n              ))\n            ) : (\n              <span>No mons in the team</span>\n            )}\n          </div>\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n\nexport default Team;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Position, Tooltip } from '@blueprintjs/core';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport styles from './Nuzlocke.module.css';\n\ninterface InPcProps {\n  pokemons: {\n    _id: string;\n    nickname: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n  }[];\n  selectPokemon: Dispatch<\n    SetStateAction<{\n      isOpen: boolean;\n      pokemon: null;\n    }>\n  >;\n}\n\nfunction InPc({ pokemons, selectPokemon }: InPcProps) {\n  return (\n    <Droppable droppableId='IN_PC'>\n      {provided => (\n        <div\n          className={styles.InPc}\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n        >\n          <h2>In PC</h2>\n          <div>\n            {pokemons.length > 0 ? (\n              pokemons.map((pokemon: any, index: number) => (\n                <Tooltip\n                  key={pokemon._id}\n                  content={\n                    pokemon.nickname ? pokemon.nickname : pokemon.pokemon.name\n                  }\n                  position={Position.TOP}\n                >\n                  <Draggable draggableId={pokemon._id} index={index}>\n                    {provided => (\n                      <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        onClick={() =>\n                          selectPokemon({\n                            isOpen: true,\n                            pokemon\n                          })\n                        }\n                      >\n                        <img\n                          src={pokemon.pokemon.sprite}\n                          alt={pokemon.pokemon.name}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                </Tooltip>\n              ))\n            ) : (\n              <span>No pokemon in pc</span>\n            )}\n          </div>\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default InPc;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Position, Tooltip } from '@blueprintjs/core';\n\ninterface DeadProps {\n  pokemons: {\n    _id: string;\n    nickname: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n  }[];\n  selectPokemon: Dispatch<\n    SetStateAction<{\n      isOpen: boolean;\n      pokemon: null;\n    }>\n  >;\n}\n\nfunction Dead({ pokemons, selectPokemon }: DeadProps) {\n  return (\n    <Droppable droppableId='DEAD'>\n      {provided => (\n        <div ref={provided.innerRef} {...provided.droppableProps}>\n          <h2>RIP</h2>\n          <div>\n            {pokemons.length > 0 ? (\n              pokemons.map((pokemon: any, index: number) => (\n                <Tooltip\n                  key={pokemon._id}\n                  content={\n                    pokemon.nickname ? pokemon.nickname : pokemon.pokemon.name\n                  }\n                  position={Position.TOP}\n                >\n                  <Draggable draggableId={pokemon._id} index={index}>\n                    {provided => (\n                      <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        onClick={() =>\n                          selectPokemon({\n                            isOpen: true,\n                            pokemon\n                          })\n                        }\n                      >\n                        <img\n                          src={pokemon.pokemon.sprite}\n                          alt={pokemon.pokemon.name}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                </Tooltip>\n              ))\n            ) : (\n              <span>Impressive, no dead mons</span>\n            )}\n          </div>\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default Dead;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Position, Tooltip } from '@blueprintjs/core';\n\nimport styles from './Nuzlocke.module.css';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\ninterface SeenProps {\n  pokemons: {\n    _id: string;\n    nickname: string;\n    location: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n  }[];\n  selectPokemon: Dispatch<\n    SetStateAction<{\n      isOpen: boolean;\n      pokemon: null;\n    }>\n  >;\n}\n\nfunction Seen({ pokemons, selectPokemon }: SeenProps) {\n  return (\n    <Droppable droppableId='SEEN'>\n      {provided => (\n        <div\n          className={styles.Seen}\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n        >\n          <h2>Not Caugth</h2>\n          <div className={styles.EncounterList}>\n            {pokemons.length > 0 ? (\n              pokemons.map((pokemon: any, index: number) => (\n                <div key={pokemon._id} className={styles.SeenPokemon}>\n                  <Tooltip\n                    key={pokemon._id}\n                    content={\n                      pokemon.nickname ? pokemon.nickname : pokemon.pokemon.name\n                    }\n                    position={Position.TOP}\n                  >\n                    <Draggable draggableId={pokemon._id} index={index}>\n                      {provided => (\n                        <img\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          ref={provided.innerRef}\n                          onClick={() =>\n                            selectPokemon({\n                              isOpen: true,\n                              pokemon\n                            })\n                          }\n                          src={pokemon.pokemon.sprite}\n                          alt={pokemon.pokemon.name}\n                        />\n                      )}\n                    </Draggable>\n                  </Tooltip>\n                </div>\n              ))\n            ) : (\n              <span>No encounters yet</span>\n            )}\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default Seen;\n","import React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { Drawer, Button, Spinner } from '@blueprintjs/core';\nimport { loader } from 'graphql.macro';\nimport { Formik, Form, Field } from 'formik';\n\nimport CustomInput from '../../components/Formik/CustomInput';\nimport CustomSelect from '../../components/Formik/CustomSelect';\n\nimport styles from './Nuzlocke.module.css';\n\nconst QUERY_ADD_POKEMON_DATA = loader('./queryAddPokemonData.graphql');\nconst MUTATION_UPDATE_POKEMON_STATUS = loader(\n  './mutationUpdatePokemonStatus.graphql'\n);\n\ninterface PokemonDrawerProps {\n  onClose: () => void;\n  isOpen: boolean;\n  pokemon: {\n    _id: string;\n    nickname: string;\n    location: string;\n    status: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n    partner: {\n      _id: number;\n      name: string;\n      image: string;\n    };\n  };\n  nuzlocke: {\n    _id: string;\n    type: string;\n  };\n  regionId: string;\n  gameId: string;\n}\n\ninterface PokemonDataProps {\n  pokemons: {\n    _id: string;\n    name: string;\n    sprite: string;\n  }[];\n  region: {\n    locations: string[];\n  };\n}\n\nconst PokemonDrawer = ({\n  pokemon,\n  nuzlocke,\n  regionId,\n  onClose,\n  gameId,\n  isOpen\n}: PokemonDrawerProps) => {\n  const { data, loading } = useQuery<PokemonDataProps, any>(\n    QUERY_ADD_POKEMON_DATA,\n    {\n      variables: {\n        regionId,\n        gameId\n      },\n      skip: !isOpen\n    }\n  );\n  const [updatePokemon, { loading: updateLoading }] = useMutation(\n    MUTATION_UPDATE_POKEMON_STATUS\n  );\n  if (!pokemon) {\n    return null;\n  }\n  return (\n    <Drawer\n      isOpen={isOpen}\n      onClose={onClose}\n      size={Drawer.SIZE_SMALL}\n      title='Edit Pokemon'\n    >\n      {loading || !data ? (\n        <div className={styles.EditPokemonForm}>\n          <Spinner />\n        </div>\n      ) : (\n        <Formik\n          initialValues={{\n            id: pokemon._id,\n            nickname: pokemon.nickname,\n            location: pokemon.location,\n            status: pokemon.status,\n            partner: nuzlocke.type === 'SOUL_LINK' ? pokemon.partner._id : null\n          }}\n          onSubmit={async values => {\n            await updatePokemon({\n              variables: {\n                id: nuzlocke._id,\n                pokemon: {\n                  id: pokemon._id,\n                  pokemon: pokemon.pokemon._id,\n                  ...values\n                }\n              }\n            });\n            onClose();\n          }}\n        >\n          {() => (\n            <Form className={styles.EditPokemonForm}>\n              <img src={pokemon.pokemon.image} alt='pokemon' />\n              <Field\n                id='nickname'\n                name='nickname'\n                label='Nickname'\n                component={CustomInput}\n              />\n              <Field\n                id='location'\n                name='location'\n                label='Location'\n                component={CustomInput}\n              />\n              <Field\n                id='status'\n                name='status'\n                component={CustomSelect}\n                label='Status'\n                placeholder='Select a Status'\n                options={[\n                  {\n                    value: 'IN_TEAM',\n                    label: 'in team'\n                  },\n                  {\n                    value: 'IN_PC',\n                    label: 'in pc'\n                  },\n                  {\n                    value: 'SEEN',\n                    label: 'seen'\n                  },\n                  {\n                    value: 'DEAD',\n                    label: 'Dead'\n                  }\n                ]}\n              />\n              {nuzlocke.type === 'SOUL_LINK' && (\n                <Field\n                  id='partner'\n                  name='partner'\n                  label='Soulink partner'\n                  component={CustomSelect}\n                  initialContent={null}\n                  options={data.pokemons.map(pokemon => ({\n                    value: pokemon._id,\n                    label: pokemon.name,\n                    icon: pokemon.sprite\n                  }))}\n                />\n              )}\n              <Button\n                type='submit'\n                intent='success'\n                loading={updateLoading}\n                large\n                rightIcon='floppy-disk'\n              >\n                Save\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      )}\n    </Drawer>\n  );\n};\n\nexport default PokemonDrawer;\n","import React from 'react';\nimport { Drawer, Tooltip } from '@blueprintjs/core';\n\nimport styles from './Nuzlocke.module.css';\n\ninterface EncountersDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  pokemons: {\n    _id: string;\n    nickname: string;\n    location: string;\n    pokemon: {\n      _id: number;\n      name: string;\n      sprite: string;\n    };\n  }[];\n}\n\nconst EncountersDrawer = ({\n  isOpen,\n  onClose,\n  pokemons\n}: EncountersDrawerProps) => {\n  return (\n    <Drawer\n      isOpen={isOpen}\n      onClose={onClose}\n      size={Drawer.SIZE_SMALL}\n      title='Encounters'\n    >\n      <div className={styles.Encounters}>\n        {pokemons.map(pok => (\n          <div key={pok._id} className={styles.Encounter}>\n            <Tooltip\n              key={pok._id}\n              content={pok.nickname ? pok.nickname : pok.pokemon.name}\n              position='top'\n            >\n              <img\n                src={pok.pokemon.sprite}\n                alt={pok.nickname || pok.pokemon.name}\n              />\n            </Tooltip>\n            <span>{pok.location}</span>\n          </div>\n        ))}\n      </div>\n    </Drawer>\n  );\n};\n\nexport default EncountersDrawer;\n","import React, { useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { loader } from 'graphql.macro';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { ProgressBar, Button } from '@blueprintjs/core';\nimport { DragDropContext, OnDragEndResponder } from 'react-beautiful-dnd';\nimport { ADD } from '@blueprintjs/icons/lib/esm/generated/iconNames';\n\nimport AddNewPokemon from './AddNewPokemon';\nimport Team from './Team';\nimport InPc from './InPc';\nimport Dead from './Dead';\nimport Seen from './Seen';\nimport PokemonDrawer from './PokemonDrawer';\n\nimport styles from './Nuzlocke.module.css';\nimport EncountersDrawer from './EncountersDrawer';\n\nconst QUERY_GET_NUZLOCKE = loader('./queryGetNuzlocke.graphql');\nconst MUTATION_UPDATE_POKEMON_STATUS = loader(\n  './mutationUpdatePokemonStatus.graphql'\n);\n\nconst getType = (type: string) => {\n  switch (type) {\n    case 'NORMAL':\n      return 'Normal';\n    case 'CAGELOCKE':\n      return 'Cagelocke';\n    case 'SOUL_LINK':\n      return 'Soul Link';\n    default:\n      return null;\n  }\n};\n\nconst Nuzlocke = () => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEncountersModalOpen, setIsEncountersModalOpen] = useState(false);\n  const [selectedPokemon, setSelectedPokemon] = useState<{\n    isOpen: boolean;\n    pokemon: any;\n  }>({\n    isOpen: false,\n    pokemon: null\n  });\n  const { nuzlockeId } = useParams();\n  const history = useHistory();\n\n  const { data, loading } = useQuery(QUERY_GET_NUZLOCKE, {\n    variables: {\n      id: nuzlockeId\n    }\n  });\n\n  const [updatePokemonStatus] = useMutation(MUTATION_UPDATE_POKEMON_STATUS);\n\n  if (loading || !data) {\n    return <ProgressBar />;\n  }\n\n  const { nuzlocke } = data;\n\n  const onDragEnd: OnDragEndResponder = async result => {\n    const { draggableId, destination } = result;\n\n    if (!draggableId || !destination) {\n      return;\n    }\n\n    const {\n      pokemon,\n      partner,\n      _id,\n      status,\n      __typename,\n      ...pokemonToUpdate\n    } = nuzlocke.pokemons.find((pokemon: any) => pokemon._id === draggableId);\n\n    await updatePokemonStatus({\n      variables: {\n        id: nuzlocke._id,\n        pokemon: {\n          id: _id,\n          pokemon: pokemon._id,\n          partner: partner ? partner._id : null,\n          status: destination.droppableId,\n          ...pokemonToUpdate\n        }\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updatePokemon: {\n          ...nuzlocke,\n          pokemons: [\n            ...nuzlocke.pokemons.filter(\n              (pok: { _id: string }) => pok._id !== _id\n            ),\n            {\n              _id,\n              pokemon,\n              partner,\n              __typename,\n              status: destination.droppableId,\n              ...pokemonToUpdate\n            }\n          ]\n        }\n      }\n    });\n  };\n\n  const team = nuzlocke.pokemons.filter(\n    (pok: { status: string }) => pok.status === 'IN_TEAM'\n  );\n  const inPc = nuzlocke.pokemons.filter(\n    (pok: { status: string }) => pok.status === 'IN_PC'\n  );\n  const deadMons = nuzlocke.pokemons.filter(\n    (pok: { status: string }) => pok.status === 'DEAD'\n  );\n  const seenMons = nuzlocke.pokemons.filter(\n    (pok: { status: string }) => pok.status === 'SEEN'\n  );\n\n  return (\n    <div className={styles.Nuzlocke}>\n      <Button\n        className={styles.BackButton}\n        onClick={() => history.push(`/profile/${nuzlocke.user.id}`)}\n        icon='step-backward'\n        minimal\n      >\n        Back to Profile\n      </Button>\n      <div className={styles.Header}>\n        <h1>{nuzlocke.name}</h1>\n        <Button\n          onClick={() => setIsEncountersModalOpen(true)}\n          large\n          minimal\n          intent='primary'\n          rightIcon='compass'\n        >\n          All Encounters\n        </Button>\n      </div>\n      <h2>{nuzlocke.game.name}</h2>\n      <span>{getType(nuzlocke.type)}</span>\n      <div className={styles.Pokemons}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Team\n            pokemons={team}\n            nuzlockeType={nuzlocke.type}\n            selectPokemon={setSelectedPokemon}\n          />\n          <InPc pokemons={inPc} selectPokemon={setSelectedPokemon} />\n          <Dead pokemons={deadMons} selectPokemon={setSelectedPokemon} />\n          <Seen pokemons={seenMons} selectPokemon={setSelectedPokemon} />\n        </DragDropContext>\n      </div>\n      <Button\n        rightIcon={ADD}\n        intent='primary'\n        onClick={() => setIsAddModalOpen(true)}\n        large\n      >\n        Add Pokemon\n      </Button>\n      <AddNewPokemon\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        regionId={nuzlocke.game.region.id}\n        gameId={nuzlocke.game.id}\n        nuzlocke={nuzlocke}\n      />\n      <PokemonDrawer\n        isOpen={selectedPokemon.isOpen}\n        pokemon={selectedPokemon.pokemon}\n        regionId={nuzlocke.game.region.id}\n        gameId={nuzlocke.game.id}\n        nuzlocke={nuzlocke}\n        onClose={() => setSelectedPokemon({ isOpen: false, pokemon: null })}\n      />\n      <EncountersDrawer\n        isOpen={isEncountersModalOpen}\n        onClose={() => setIsEncountersModalOpen(false)}\n        pokemons={nuzlocke.pokemons}\n      />\n    </div>\n  );\n};\n\nexport default Nuzlocke;\n","import React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Intent, Toaster, Toast } from '@blueprintjs/core';\nimport { loader } from 'graphql.macro';\nimport * as yup from 'yup';\n\nimport CustomInput from '../../components/Formik/CustomInput';\n\nimport { setAccessToken } from '../../accessToken';\n\nimport styles from './Register.module.css';\n\nconst MUTATION_SIGNUP = loader('./mutationSignUp.graphql');\n\nconst Register = () => {\n  const [alert, setAlert] = useState(false);\n  const [signUp, { loading }] = useMutation(MUTATION_SIGNUP);\n\n  const history = useHistory();\n\n  const emailIcon = (\n    <Button icon='envelope' intent={Intent.WARNING} minimal={true} />\n  );\n\n  const personIcon = (\n    <Button icon='user' intent={Intent.WARNING} minimal={true} />\n  );\n  return (\n    <div className={styles.Register}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          repeatPassword: ''\n        }}\n        validationSchema={yup.object().shape({\n          name: yup\n            .string()\n            .required()\n            .label('This'),\n          email: yup\n            .string()\n            .email()\n            .required()\n            .label('This'),\n          password: yup\n            .string()\n            .required()\n            .label('This'),\n          repeatPassword: yup\n            .string()\n            .required()\n            .test('passwords-match', 'Passwords should match', function(value) {\n              return this.parent.password === value;\n            })\n            .label('This')\n        })}\n        onSubmit={async ({ repeatPassword, ...values }) => {\n          const response = await signUp({\n            variables: {\n              input: values\n            }\n          }).catch(err => setAlert(true));\n\n          if (response) {\n            setAccessToken(response.data.signUp.token);\n            history.push(`/profile/${response.data.signUp.userId}`);\n          }\n        }}\n      >\n        {() => (\n          <Form className={styles.RegisterForm}>\n            <h1>Register</h1>\n            <Field\n              name='name'\n              component={CustomInput}\n              rightElement={personIcon}\n              placeholder='pokemon trainer name'\n            />\n            <Field\n              name='email'\n              component={CustomInput}\n              rightElement={emailIcon}\n              rigth\n              placeholder='email'\n            />\n            <Field\n              name='password'\n              type='password'\n              placeholder='password'\n              component={CustomInput}\n            />\n            <Field\n              name='repeatPassword'\n              type='password'\n              placeholder='confirm password'\n              component={CustomInput}\n            />\n            <Button\n              type='submit'\n              rightIcon='arrow-right'\n              fill\n              loading={loading}\n            >\n              Sign Up\n            </Button>\n            {alert && (\n              <Toaster position='top'>\n                <Toast\n                  intent='danger'\n                  message='An error has occurred'\n                  onDismiss={() => setAlert(false)}\n                />\n              </Toaster>\n            )}\n          </Form>\n        )}\n      </Formik>\n      <Link to='/login'>Already have an account?</Link>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { useContext } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\n\nimport Context from '../AppContext';\n\ninterface AuthenticatedRouteProps {\n  path: string;\n  children: React.ReactNode;\n}\n\nconst AuthenticatedRoute = ({ path, children }: AuthenticatedRouteProps) => {\n  const { isAuthenticated } = useContext(Context);\n\n  if (!isAuthenticated) {\n    return <Redirect to='/login' />;\n  }\n  return <Route path={path}>{children}</Route>;\n};\n\nexport default AuthenticatedRoute;\n","import React, { useContext } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { ProgressBar } from '@blueprintjs/core';\nimport { loader } from 'graphql.macro';\n\nimport Context from '../AppContext';\n\nconst QUERY_GET_CURRENT_USER = loader('./queryGetCurrentUser.graphql');\n\ninterface PublicRouteProps {\n  path: string;\n  children: React.ReactNode;\n  exact?: boolean;\n}\n\nconst PublicRoute = ({ path, children, ...props }: PublicRouteProps) => {\n  const { isAuthenticated } = useContext(Context);\n  const { data, loading } = useQuery(QUERY_GET_CURRENT_USER, {\n    skip: !isAuthenticated\n  });\n\n  if (isAuthenticated) {\n    if (loading) {\n      return <ProgressBar />;\n    }\n    return <Redirect to={`/profile/${data.user.id}`} />;\n  }\n\n  return (\n    <Route path={path} {...props}>\n      {children}\n    </Route>\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Profile from './pages/Profile';\nimport Nuzlocke from './pages/Nuzlocke';\nimport Register from './pages/Register';\nimport AuthenticatedRoute from './components/Routes/AuthenticatedRoute';\nimport PublicRoute from './components/Routes/PublicRoute';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <PublicRoute exact path='/'>\n          <Home />\n        </PublicRoute>\n        <PublicRoute path='/register'>\n          <Register />\n        </PublicRoute>\n        <PublicRoute path='/login'>\n          <Login />\n        </PublicRoute>\n        <AuthenticatedRoute path='/profile/:userId'>\n          <Profile />\n        </AuthenticatedRoute>\n        <AuthenticatedRoute path='/nuzlocke/:nuzlockeId'>\n          <Nuzlocke />\n        </AuthenticatedRoute>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Operation, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\n\nimport { getAccessToken, setAccessToken, isTokenValid } from './accessToken';\n\nconst request = async (operation: Operation) => {\n  const token = getAccessToken();\n  operation.setContext({\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  });\n};\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then(oper => request(oper))\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: 'accessToken',\n      isTokenValidOrUndefined: () => {\n        const token = getAccessToken();\n        return !isTokenValid(token);\n      },\n      fetchAccessToken: () => {\n        return fetch('http://localhost:4000/refresh-token', {\n          method: 'POST',\n          credentials: 'include'\n        });\n      },\n      handleFetch: token => {\n        setAccessToken(token);\n      },\n      handleError: err => {\n        console.warn('Your refresh token is invalid. Try to relogin');\n        console.error(err);\n      }\n    }),\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: 'http://localhost:4000/graphql',\n      credentials: 'include'\n    })\n  ]),\n\n  cache: new InMemoryCache()\n});\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport App from './App';\nimport { AppProvider } from './components/AppContext';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apolloClient';\n\nimport 'normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\nimport './App.css';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3EVGC\",\"MyNuzlockes\":\"Profile_MyNuzlockes__D6tGx\",\"NuzlockePreview\":\"Profile_NuzlockePreview__1zeP6\",\"TeamSprites\":\"Profile_TeamSprites__In0kG\",\"AddButton\":\"Profile_AddButton__2SNpK\",\"AddNuzlockeForm\":\"Profile_AddNuzlockeForm__ZPHLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__1ihTB\",\"LoginButton\":\"Home_LoginButton__37Wd1\",\"ActionBox\":\"Home_ActionBox__3QffN\",\"GetStartedButton\":\"Home_GetStartedButton__36-MJ\"};"],"sourceRoot":""}